Retrieve the details of all orders placed on a specific date:
SELECT * FROM orders WHERE order_date = ?;
Retrieve the details of all items whose stock has fallen below the reorder level:
SELECT items.* FROM items JOIN inventory ON items.id = inventory.item_id WHERE inventory.quantity < items.reorder_level;
update:
UPDATE inventory SET quantity = ? WHERE item_id = ?;

SQL query to retrieve the remaining quantity of items from the items table:
SELECT name, (quantity - SUM(quantity_sold)) as remaining_quantity
FROM items
LEFT JOIN (SELECT item_id, SUM(quantity) as quantity_sold
           FROM orders
           GROUP BY item_id) as sold
ON items.id = sold.item_id
GROUP BY items.id;

You can also use the same query with a condition to check for a specific item:

SELECT name, (quantity - SUM(quantity_sold)) as remaining_quantity
FROM items
LEFT JOIN (SELECT item_id, SUM(quantity) as quantity_sold
           FROM orders
           GROUP BY item_id) as sold
ON items.id = sold.item_id
WHERE name = "ItemName"
GROUP BY items.id;

Retrieve the details of all items that are out of stock:
SELECT items.*
FROM items
LEFT JOIN (SELECT item_id, SUM(quantity) as quantity_sold
           FROM orders
           GROUP BY item_id) as sold
ON items.id = sold.item_id
WHERE (quantity - COALESCE(quantity_sold, 0)) <= 0;

Retrieve the total revenue and the total quantity sold for each category:

SELECT category, SUM(items.price * orders.quantity) as revenue, SUM(orders.quantity) as quantity_sold
FROM items
JOIN orders ON items.id = orders.item_id
GROUP BY category;

Retrieve the details of the top 10 items by total revenue:

SELECT items.*, SUM(items.price * orders.quantity) as revenue
FROM items
JOIN orders ON items.id = orders.item_id
GROUP BY items.id
ORDER BY revenue DESC
LIMIT 10;

Retrieve the details of the suppliers whose products have not been ordered in the last 30 days:

SELECT suppliers.*
FROM suppliers
LEFT JOIN items ON suppliers.id = items.supplier_id
LEFT JOIN orders ON items.id = orders.item_id
WHERE orders.order_date < DATE_SUB(CURDATE(), INTERVAL 30 DAY)
GROUP BY suppliers.id
HAVING COUNT(DISTINCT orders.id) = 0;






